#include "mainpage.h"
#include "ui_mainpage.h"
#include "controller/monitorcontroller.h"
#include "controller/settings.h"
//#include "controller/sessions/session.h"
#include "sensor/isensor.h"
#include "gui/gui_funcs.h"
#include "gui/mainmenu.h"
#include "plots/markitem.h"
#include "plots/labelmarkitem.h"
#include "controller/labels/label.h"
#include "global_functions.h"
#include "plots/intervalplot.h"
#include "sensor/impl/fileimitsensor.h"


#include <QTimer>
#include <QDateTime>
#include <QPushButton>
#include <QDebug>
#include <QProcess>
#include <QStringList>

QString tempArrTime
QString tempArrPressure = "20.272 22.013 22.951 22.549 23.048 22.829 22.537 23.072 22.671 22.366 22.366 21.843 22.062 21.563 21.514 20.857 20.394 19.639 18.775 18.178 17.715 17.058 16.145 15.731 15.207 14.647 14.318 13.637 13.296 12.979 13.722 15.682 17.898 20.345 21.989 22.926 22.695 22.975 22.865 22.963 23.072 23.024 22.549 22.452 22.585 21.965 21.758 21.587 20.942 20.345 19.676 18.896 18.701 17.618 17.082 16.206 15.658 15.231 14.708 13.965 13.868 13.235 12.869 13.113 14.391 17.411 19.164 20.942 22.525 22.926 22.926 22.598 22.549 23.146 23.06 22.975 22.525 22.062 22.111 21.745 21.197 21.003 20.613 19.152 19.115 18.555 17.752 17.18 16.546 15.865 15.512 14.708 14.343 14.099 13.77 13.174 13.247 14.245 16.826 19.262 21.222 22.269 23.109 23.45 22.914 23.243 23.389 23.572 23.158 23.401 23.06 22.926 22.585 22.5 22.403 21.928 20.771 20.491 19.554 19.152 18.495 17.667 17.131 17.228 16.4 15.645 15.548 14.708 14.83 14.233 15.402 17.301 19.968 22.366 23.961 24.594 24.558 24.509 24.838 24.935 24.643 25.021 24.972 24.375 24.558 23.657 23.511 22.999 22.074 21.989 21.088 20.443 19.712 19.018 18.47 17.947 17.082 16.766 16.303 15.56 15.158 14.184 13.673 14.598 16.619 19.164 21.356 22.963 23.961 24.059 24.339 24.473 24.363 24.874 24.85 24.424 23.986 23.486 23.608 22.963 22.537 22.062 21.429 21.149 20.065 19.493 19.079 18.117 17.204 17.107 16.339 15.792 15.305 14.769 14.391 13.478 14.184 16.108 18.397 20.905 22.403 23.559 23.998 23.852 24.132 23.961 23.864 24.047 23.9 23.389 23.121 22.926 22.622 22.403 21.977 21.149 20.248 20.041 19.152 18.641 18.032 17.094 16.68 16.145 15.609 15.305 14.72 14.245 13.758 14.087 15.889 18.068 20.43 22.951 23.426 23.888 23.864 23.608 24.083 23.998 23.888 23.986 23.486 22.865 22.598 22.208 22.549 21.684 21.039 20.248 19.785 19.213 18.166 17.959 17.338 16.619 16.169 15.706 15.073 14.44 14.099 13.283 13.758 15.986 18.348 21.051 22.452 23.572 23.913 23.888 23.73 23.864 23.998 23.961 23.84 23.633 22.914 22.963 22.5 22.452 21.928 20.613 20.418 20.041 19.006 18.348 17.606 17.058 16.778 15.755 15.487 14.671 14.099 13.673 13.563 15.597 18.141 19.968 22.318 23.292 24.01 23.608 23.426 23.815 23.998 23.937 23.913 23.474 23.474 23.024 22.439 21.977 21.563 20.978 20.199 19.627 18.848 18.227 17.679 17.058 16.449 15.645 15.317 14.598 13.868 13.758 13.637 14.294 16.425 19.128 21.283 22.525 23.389 24.473 23.949 23.864 23.986 23.986 24.46 23.9 23.535 23.486 22.926 23.024 22.549 21.965 21.648 20.601 19.907 19.298 18.446 18.214 17.703 17.058 16.339 16.023 15.645 14.793 14.72 14.647 14.939 17.155 19.602 22.269 24.083 24.753 24.85 25.081 24.947 24.972 25.167 25.361 25.021 24.509 24.375 24.12 23.523 23.109 22.573 21.758 21.149 20.467 19.663 19.03 17.861 18.032 17.046 16.291 15.548 15.499 14.793 14.282 14.148 16.145 18.421 20.747 22.525 23.888 24.29 24.497 24.168 24.168 24.46 24.838 24.424 23.937 23.474 23.072 22.951 22.622 22.111 21.368 20.321 20.053 19.602 18.726 17.679 17.277 16.96 16.145 15.731 15.463 14.757 14.282 14.16 16.668 19.03 21.319 22.963 23.852 23.791 23.986 23.913 24.424 23.888 23.961 23.511 23.012 22.963 22.403 22.573 22.038 21.453 21.1 20.041 19.578 18.616 17.606 17.667 16.68 16.291 15.743 14.842 14.611 14.294 13.624 13.734 15.085 17.374 19.834 21.758 22.926 23.438 23.377 23.572 23.559 23.389 23.681 23.523 22.695 23.024 22.342 22.598 22.135 21.477 21.185 20.382 19.505 18.653 17.74 17.618 16.693 16.291 16.266 15.378 14.708 14.282 13.685 13.162 12.821 14.136 16.717 18.969 20.942 22.853 23.389 23.572 22.926 22.878 23.34 23.426 23.486 23.024 22.415 22.549 22.318 21.855 21.551 20.942 20.54 19.663 19.018 18.227 17.654 17.082 16.254 15.682 15.158 14.72 14.16 13.953 13.563 13.356 14.611 16.875 19.31 21.124 22.452 23.097 22.914 23.012 23.012 22.914 23.523 23.353 22.768 22.5 22.013 22.135 22.074 21.453 20.601 20.041 19.602 18.653 18.007 17.667 16.619 16.084 15.706 15.073 14.477 14.282 13.612 13.332 14.245 16.035 18.616 20.796 22.768 23.535 23.401 23.584 23.377 23.937 24.01 23.864 23.633 23.486 22.598 23.06 22.878 22.525 22.038 21.465 20.65 19.554 18.75 18.568 18.044 17.63 17.009 16.169 16.084 15.694 14.878 14.708 14.696 16.4 18.701 21.368 23.572 24.874 25.398 25.41 25.203 25.435 25.459 25.398 25.556 25.021 24.12 24.448 23.852 23.231 23.024 22.403 21.587 20.93 19.931 19.383 18.519 18.19 17.606 17.046 16.546 15.585 15.073 15.134 15.585 18.214 20.577 22.452 24.278 24.838 25.349 24.923 24.874 25.459 25.349 25.203 24.935 24.339 24.047 23.961 23.158 22.975 22.5 21.429 20.99 20.284 19.59 19.128 18.068 17.752 17.094 16.437 15.755 15.231 15.56 16.9 19.115 21.514 23.292 24.692 24.996 24.838 25.033 24.85 24.874 24.996 24.753 24.095 23.986 23.9 23.231 22.914 22.366 22.074 20.978 20.43 19.505 18.982 18.604 17.569 17.046 16.668 16.084 15.743 15.256 15.925 18.044 20.418 22.585 24.29 24.874 24.497 24.57 24.874 25.069 25.508 24.887 24.546 24.314 24.034 23.766 23.353 22.999 22.391 21.684 20.905 19.907 19.688 19.115 18.032 17.715 16.96 16.254 15.743 15.633 15.938 17.606 20.004 22.5 24.29 25.483 25.154 25.069 25.495 25.361 25.678 25.495 24.874 24.448 24.168 23.681 23.584 22.999 22.573 22.074 21.051 20.564 19.274 19.067 18.641 17.813 17.18 16.668 16.218 15.694 15.158 15.645 17.703 20.333 22.853 24.473 25.349 25.495 25.203 25.361 25.447 25.301 25.605 24.874 24.424 23.815 23.426 23.523 22.999 22.439 21.843 20.93 20.248 19.249 18.689 18.519 17.569 17.046 16.291 15.877 15.317 14.757 15.158 17.886 20.211 22.293 23.986 24.899 25.313 24.887 25.203 25.483 25.447 25.836 24.838 24.546 24.46 24.047 23.949 23.401 22.719 22.22 21.636 20.577 20.138 19.395 18.568 18.227 17.533 17.107 16.729 16.169 16.254 17.46 20.187 22.488 24.412 25.97 26.774 26.335 26.25 26.214 26.445 26.896 26.494 26.567 25.861 25.374 24.972 24.448 23.986 23.474 22.488 22.074 21.088 20.613 19.481 19.103 18.543 17.654 17.046 16.291 15.645 16.534 18.75 21.124 23.474 25.325 25.909 26.445 26.384 26.469 26.372 26.908 26.92 26.141 25.435 25.459 24.899 24.509 23.791 23.438 22.671 21.843 21.197 20.577 20.041 18.848 18.616 17.581 17.204 16.729 16.254 16.619 18.373 20.82 22.963 24.546 25.435 25.556 25.982 25.873 25.836 25.885 25.836 25.495 24.826 24.412 24.473 24.034 23.45 23.097 22.038 21.453 20.771 20.102 19.602 18.75 18.068 17.667 16.863 16.534 15.365 15.645 17.289 19.785 22.013 23.961 24.753 25.532 25.495 25.398 25.556 25.788 25.69 25.447 24.874 24.643 23.998 23.584 23.608 22.926 22.573 21.563 20.93 19.907 19.115 19.079 18.141 17.374 17.18 16.644 16.108 15.28 15.597 17.35 20.089 22.488 24.339 24.972 25.325 25.508 25.508 25.349 25.824 25.629 25.033 24.972 24.363 23.949 23.681 23.559 22.999 21.94 21.502 20.54 20.041 19.164 18.543 18.166 17.301 16.68 16.193 15.597 15.207 15.694 17.569 20.065 22.744 24.18 25.435 25.41 25.118 25.459 25.349 25.532 25.483 24.558 24.424 23.888 23.913 23.511 23.024 22.488 21.636 20.844 20.138 19.505 19.006 18.288 17.801 17.24 16.254 16.035 15.365 14.842 15.231 16.68 19.359 21.879 23.681 24.558 24.996 25.021 24.85 24.935 25.081 24.57 24.473 24.059 23.718 23.45 23.012 23.024 22.171 21.587 20.82 20.102 19.712 18.982 18.519 17.533 17.046 16.766 16.084 15.779 15.073 15.792 18.543 21.258 23.559 24.935 25.325 25.447 25.483 25.301 25.934 25.958 25.629 25.447 24.899 24.509 24.546 24.047 23.243 22.914 22.354 21.185 20.93 20.564 19.529 19.176 18.653 17.995 17.387 16.717 16.254 16.242 17.898 20.759 23.072 24.996 26.445 26.299 26.494 26.469 26.019 26.896 26.725 26.53 25.982 25.325 24.996 24.57 24.473 23.864 23.048 22.025 21.185 20.491 19.834 19.578 18.653 18.166 17.52 17.046 16.084 16.108 17.131 19.347 22.123 23.949 25.325 26.494 25.97 25.836 25.873 26.25 26.494 25.885 25.349 25.021 24.473 24.01 23.584 22.951 22.585 21.989 21.027 20.272 19.493 18.835 18.592 17.667 17.192 16.583 16.108 15.609 16.473 18.446 21.088 23.584 24.558 25.435 25.374 25.459 25.361 25.532 25.398 25.252 24.838 24.29 23.937 23.072 22.914 22.853 22.074 21.185 20.65 19.992 19.225 18.689 17.63 17.289 16.352 16.303 15.731 15.134 15.268 16.826 19.493 22.038 23.45 25.069 24.972 24.899 25.045 24.935 24.923 24.947 24.387 24.059 24.01 23.024 23.048 22.646 22.464 21.563 20.54 20.199 19.542 18.592 18.214 17.569 16.9 16.242 15.743 15.305 14.757 14.623 15.986 18.117 20.869 22.963 24.241 25.045 24.838 24.558 24.46 24.874 25.045 24.46 23.523 23.633 22.732 22.963 22.902 22.573 21.551 20.99 20.296 19.115 18.604 18.081 17.338 16.863 16.218 15.743 15.122 14.83 14.428 15.658 18.543 20.844 22.391 23.961 24.29 24.095 23.9 24.509 24.46 24.241 23.62 23.511 23.121 23.048 22.732 22.622 21.965 21.197 20.394 19.602 19.115 18.555 17.581 17.508 16.644 15.28 15.329 14.696 14.318 14.16 15.548 18.068 20.844 22.403 23.9 24.923 24.448 24.01 23.949 24.46 24.521 24.57 23.998 23.426 23.523 22.951 22.902 22.305 21.928 21.124 20.516 19.602 19.115 18.653 18.044 17.204 16.571 16.242 15.694 15.158 15.231 15.962 17.947 21.051 22.975 25.021 24.996 25.41 25.483 25.325 25.544 25.556 25.934 25.374 24.412 24.387 23.961 23.584 23.353 22.549 21.928 21.319 20.187 19.809 19.128 18.507 17.861 16.778 16.339 16.193 15.256 15.231 16.668 18.787 21.514 23.438 24.899 25.483 25.544 25.167 25.483 25.349 25.544 25.228 24.899 24.46 23.474 23.438 23.584 22.354 22.171 21.088 20.516 19.639 19.03 18.568 17.667 17.143 16.668 16.242 15.548 15.037 15.585 17.959 20.321 22.902 24.363 24.509 24.801 24.972 24.923 24.935 24.692 24.546 24.034 23.474 23.535 23.048 22.695 21.989 21.465 21.1 20.248 19.59 19.03 18.068 17.557 16.851 16.12 15.816 15.755 14.72 15.548 17.581 19.956 22.111 23.353 24.448 24.692 24.509 24.57 24.363 24.363 24.546 23.572 23.06 23.121 22.914 22.671 22.403 22.025 21.051 20.236 19.676 18.945 18.214 17.764 17.082 16.486 15.694 15.512 14.939 14.72 15.365 17.155 20.041 22.914 23.937 24.278 24.497 24.339 24.473 24.339 24.874 24.521 23.815 23.511 23.048 22.951 22.585 22.038 21.514 20.759 19.834 19.505 18.677 18.068 17.387 16.693 15.597 15.755 15.158 14.44 14.501 15.658 18.068 20.443 22.744 23.986 24.241 24.01 24.12 23.681 24.57 24.339 24.034 23.633 22.902 23.024 22.865 22.537 22.086 21.149 20.516 20.102 19.103 18.689 17.63 17.094 16.766 16.084 15.658 14.891 14.099 14.379 14.659 16.948 19.736 21.709 23.511 23.535 23.937 23.998 23.913 23.913 24.132 23.998 23.535 23.072 22.951 22.573 22.074 21.989 21.587 20.467 20.114 19.079 18.568 17.703 17.082 16.753 16.108 15.317 15 14.513 14.367 14.233 15.913 18.921 21.003 23.024 23.608 24.375 24.29 24.46 24.424 24.972 24.521 24.412 23.998 23.45 23.486 22.999 22.914 22.573 21.551 21.039 20.272 19.529 33.673 32.962 31.372 30.77 29.783 29.309 28.615 27.701 27.245 28.067 30.641 35.846 39.152 42.311 43.262 42.97 43.243 42.403 42.494 42.896 43.115 43.225 41.71 41.071 41.252 40.066 39.427 38.824 37.417 36.686 35.098 34.294 32.98 32.176 31.682 30.697 29.893 28.888 27.757 26.587 27.044 28.961 32.705 36.23 39.682 41.71 42.349 41.71 41.326 41.618 41.855 42.421 41.672 40.522 40.157 39.572 39.463 38.678 37.966 37.399 35.792 34.988 33.692 33.673 31.847 31.519 30.094 29.218 27.976 27.958 26.861 26.204 26.752 29.437 33.308 36.851 39.298 41.089 40.979 40.577 40.979 40.412 41.071 40.229 40.211 39.536 39.389 38.239 38.806 38.093 37.289 35.792 35.006 33.893 32.833 32.066 30.88 30.076 29.455 28.597 27.556 27.062 25.492 25.181 25.912 28.798 32.888 36.286 38.587 40.358 40.376 40.229 40.066 40.358 40.339 40.303 39.025 38.732 38.732 38.111 37.417 37.472 36.485 35.737 34.568 33.601 32.888 30.86 30.076 29.399 28.523 27.701 27.154 26.24 25.729 24.889 24.797 24.797 28.34 33.163 35.866 38.587 39.572 39.389 39.536 39.499 39.298 39.572 39.499 38.659 38.824 38.093 37.91 37.417 36.485 35.866 35.153 33.673 32.98 31.519 30.715 30.02 28.742 28.414 27.136 26.66 26.296 24.944 24.323 24.614 26.77 30.788 34.166 36.907 39.298 39.371 40.102 39.298 39.353 39.371 39.463 38.788 38.678 37.984 37.892 37.253 37.106 36.577 35.408 34.367 33.655 32.194 31.445 30.167 29.893 29.035 27.647 27.062 26.35 25.492 24.925 25.601 26.752 30.587 34.075 37.216 39.445 39.427 39.518 39.152 39.353 39.664 39.298 38.806 38.477 37.874 38.057 37.289 37.126 36.559 35.701 34.331 33.692 32.285 31.646 30.386 30.02 29.29 28.067 27.976 26.843 26.296 25.747 25.985 28.798 33.016 35.701 38.788 40.924 40.924 40.832 40.87 41.015 40.942 40.924 40.211 40.139 39.608 39.536 39.445 39.007 37.984 37.052 36.085 34.897 34.294 33.016 32.122 31.573 30.313 30.076 29.254 28.322 27.775 26.77 28.03 32.321 36.157 38.806 41.69 42.257 42.331 42.494 42.421 42.805 42.695 42.568 42.403 41.071 40.906 40.229 40.157 39.608 38.368 37.271 36.559 35.024 34.313 33.673 32.122 31.555 30.641 29.309 28.523 27.647 26.989 26.332 27.482 31.262 35.134 38.732 40.376 41.471 41.891 41.618 41.344 41.636 41.672 41.819 40.211 40.066 40.229 39.646 39.043 38.185 37.399 36.632 35.245 33.893 33.107 32.048 30.86 30.221 29.309 28.597 27.737 27.116 26.204 25.235 26.788 29.381 33.344 36.577 39.499 40.267 41.051 40.76 40.229 40.486 40.778 40.85 39.682 39.28 39.499 38.696 38.605 38.111 36.505 36.065 35.062 34.24 33.728 32.011 30.989 30.04 28.541 28.559 27.683 26.935 26.441 25.456 24.944 26.917 30.313 34.093 37.271 39.445 40.43 40.267 40.339 40.211 40.175 40.924 40.01 38.969 39.518 38.659 38.824 38.038 37.034 36.577 35.701 34.568 33.107 32.212 31.573 30.623 29.381 28.724 27.757 27.628 26.332 25.565 25.016 25.418 27.757 31.427 34.897 38.038 40.229 40.303 40.85 40.139 40.339 40.285 40.796 40.303 38.824 38.75 38.806 37.874 38.111 37.381 36.431 35.701 33.874 33.509 32.212 30.806 30.149 30.002 28.633 27.847 26.788 26.368 25.655 25.583 28.487 31.901 35.317 38.239 40.066 40.796 40.486 40.175 40.595 40.87 40.87 40.504 39.956 39.499 39.608 39.244 38.824 38.093 36.706 36.577 34.952 34.021 33.016 31.865 31.628 30.569 29.399 29.309 28.396 27.92 27.19 27.701 31.081 35.08 38.111 40.942 42.257 43.262 42.914 43.243 43.225 43.042 43.663 42.695 42.349 42.421 41.837 40.924 40.997 40.139 38.057 37.345 36.395 35.153 34.258 33.619 32.176 30.916 30.788 29.819 28.798 27.757 28.03 29.966 33.619 37.709 41.125 42.805 43.718 43.39 42.914 44.011 44.011 43.901 44.011 42.823 42.311 41.71 40.832 41.125 40.066 38.878 38.038 36.577 35.354 34.403 33.509 33.125 31.135 30.13 29.948 28.559 28.669 29.162 31.921 35.719 39.17 41.618 43.024 42.458 43.061 43.189 43.042 43.171 43.225 42.421 41.618 40.76 40.997 40.303 38.878 38.513 37.327 36.614 35.81 34.294 33.764 32.542 31.501 30.733 29.819 28.798 27.409 27.61 29.29 31.993 35.5 39.098 41.509 43.153 42.568 42.257 42.403 42.458 43.316 42.604 42.239 41.581 40.997 40.87 40.175 39.098 38.696 37.892 36.047 36.011 34.294 33.619 32.669 31.993 30.806 29.966 29.162 28.669 27.811 28.414 30.989 35.006 38.257 40.979 42.311 43.189 42.331 42.421 43.225 43.042 43.153 42.476 41.509 41.71 41.015 40.559 39.883 38.788 38.732 37.18 35.774 34.714 33.545 32.906 32.212 30.88 30.076 29.108 28.669 27.847 27.683 30.514 33.418 37.106 40.267 42.038 43.225 42.622 42.403 42.403 43.153 43.243 42.97 42.311 41.764 41.015 40.267 39.737 38.897 37.984 37.381 35.426 34.733 34.385 32.852 32.194 31.081 30.806 29.327 28.231 27.811 26.642 28.34 31.445 34.861 38.623 40.906 42.403 42.421 42.257 43.061 43.171 43.115 43.262 43.153 42.239 41.891 40.924 40.942 40.267 39.572 38.477 37.198 36.395 35.153 34.148 33.601 32.906 32.14 30.989 29.966 29.309 28.742 29.783 32.906 36.778 40.631 43.225 44.011 44.449 44.558 44.576 45.307 45.362 45.088 44.924 44.212 43.262 43.153 42.202 41.581 40.687 39.919 38.806 37.289 36.065 35.207 34.24 33.746 32.176 31.336 30.641 29.71 29.327 29.948 32.761 36.907 40.175 42.896 44.011 44.449 44.522 44.576 43.883 45.49 44.813 44.704 43.115 43.171 42.568 41.618 40.87 40.285 38.86 38.129 36.796 35.737 35.281 33.746 32.761 32.122 31.135 29.966 29.254 28.487 31.262 35.153 38.732 41.819 43.718 43.883 43.901 43.754 43.955 43.718 43.754 42.878 42.331 41.581 40.942 40.43 39.938 39.317 37.948 38.057 35.92 35.299 34.184 32.815 32.395 31.354 29.948 29.29 28.615 27.92 28.559 31.262 35.171 38.587 41.509 43.189 43.024 43.408 43.243 42.476 43.189 42.914 42.55 41.198 40.796 40.376 39.791 39.427 38.878 37.874 36.686 35.134 34.294 33.746 32.176 31.354 30.77 30.076 29.363 28.523 27.007 27.116 27.757 31.28 34.934 38.386 41.125 41.819 42.476 42.532 42.275 42.568 42.421 41.764 41.782 40.85 40.211 40.285 39.371 38.969 38.294 37.216 36.011 35.062 33.692 33.016 31.901 31.682 30.569 29.017 28.03 28.195 27.116 26.35 27.5 30.44 34.331 37.546 40.157 41.29 42.257 41.71 41.071 41.18 42.184 41.071 41.015 40.084 40.285 39.463 39.317 38.897 37.673 36.724 35.774 34.184 33.527 32.542 31.409 30.532 30.02 29.254 27.829 27.007 26.296 26.167 26.35 28.688 32.011 36.23 39.188 40.577 41.29 40.87 40.87 40.705 40.85 40.87 40.303 39.445 39.463 38.696 38.185 38.02 37.819 36.907 35.701 34.532 33.692 32.833 31.829 30.934 30.386 29.309 28.396 27.683 27.116 26.204 26.368 28.961 33.473 36.541 39.59 41.509 42.349 42.038 42.202 42.331 41.819 42.458 41.819 41.746 40.979 40.85 40.175 40.157 39.572 38.167 37.216 36.194 35.207 33.947 33.746 32.194 31.007 30.77 29.857 29.18 27.902 26.989 27.775 30.989 35.08 38.806 42.202 43.171 43.097 43.097 43.243 43.481 43.864 43.736 43.298 42.568 41.509 41.29 41.071 40.358 39.682 38.111 37.216 36.286 34.897 33.673 32.924 32.102 31.208 29.893 29.162 28.468 28.195 29.017 31.847 35.737 39.317 41.545 43.262 43.153 43.225 42.988 43.061 43.262 43.171 42.331 41.764 40.796 40.504 39.992 39.389 38.605 37.564 36.085 35.024 34.514 33.728 32.669 31.555 30.788 29.966 29.108 28.103 27.647 28.798 31.61 35.518 39.427 41.983 42.622 42.622 42.532 42.257 42.458 42.239 42.604 41.545 41.051 40.979 40.229 40.175 38.933 37.948 37.546 36.194 35.08 34.495 33.4 32.267 31.445 30.569 29.218 28.378 28.724 27.08 26.332 26.989 29.638 33.235 36.833 39.956 41.563 42.385 42.55 42.311 42.385 42.914 42.532 41.69 40.942 40.942 40.211 39.956 39.59 38.659 37.984 36.286 35.92 34.733 33.673 32.249 31.19 30.842 30.002 29.363 28.669 27.737 26.825 25.985 25.456 27.976 32.011 35.627 39.152 40.924 41.618 41.143 41.618 41.855 41.216 42.532 41.71 40.906 40.76 40.267 39.445 39.536 38.458 37.747 36.541 35.665 34.441 33.655 32.048 31.481 30.697 29.929 29.29 28.378 27.427 26.515 26.057 27.683 30.697 34.642 38.111 40.631 41.618 41.545 41.636 41.782 42.421 42.476 42.494 41.69 40.924 40.76 40.358 40.285 39.427 38.897 37.966 36.706 35.792 34.733 33.655 32.924 32.066 30.842 30.587 29.875 29.236 28.396 27.902 28.669 31.336 35.627 39.809 42.275 43.792 43.754 43.408 43.736 44.467 44.594 44.558 44.576 43.864 43.39 43.243 42.494 41.563 40.942 39.682 38.33 37.399 36.431 35.171 34.294 33.326 32.194 31.262 30.806 30.203 29.236 27.884 28.34 30.002 33.545 38.257 41.015 42.476 43.937 44.65 44.029 44.083 44.65 45.088 44.942 44.284 43.298 43.189 42.311 42.202 41.545 40.157 38.933 37.948 37.052 35.665 35.006 33.746 32.815 32.14 31.262 30.02 29.437 28.468 27.884 29.236 32.687 36.541 40.01 41.965 43.682 43.243 43.225 43.864 44.011 44.011 44.011 43.061 43.097 42.421 42.056 41.71 40.832 40.267 38.587 37.91 36.706 34.988 34.532 33.583 32.176 32.212 30.641 30.86 29.674 28.322 28.048 28.378 30.77 34.24 38.294 41.125 42.988 43.024 43.298 42.97 43.334 43.901 44.212 44.284 42.805 42.349 42.458 41.509 40.997 40.267 39.298 38.093 36.961 36.085 35.08 33.82 33.052 32.176 32.048 30.788 30.002 29.162 28.487 28.03 28.816 32.267 36.157 39.956 42.311 43.225 43.901 43.682 43.973 44.284 44.248 44.668 43.736 43.189 42.532 41.782 41.819 40.997 40.229 39.152 38.312 37.327 35.938 34.733 34.075 32.962 32.14 31.519 30.569 29.857 29.053 27.775 27.829 28.87 33.125 36.796 39.353 41.545 43.042 43.115 43.189 43.097 43.883 44.431 44.138 43.225 42.331 42.349 41.746 40.577 40.412 39.59 38.659 37.526 36.139 35.134 34.403 33.509 32.542 31.72 30.842 30.094 29.089 28.414 27.757 27.701 29.929 33.326 37.144 40.942 42.731 43.298 42.952 43.591 43.973 44.65 44.558 44.632 43.828 43.225 43.189 42.421 42.421 41.782 40.631 39.499 38.678 37.271 36.467 35.482 34.495 33.728 32.888 32.194 31.372 30.661 29.875 29.29 29.966 33.016 37.253 40.85 43.736 45.38 45.854 45.544 45.416 45.854 46.714 46.64 46.184 44.869 43.955 44.558 43.955 43.061 42.532 41.782 40.339 39.791 37.892 36.632 35.719 34.495 33.673 32.743 32.359 31.501 30.587 29.327 28.414 29.473 32.761 37.417 40.979 42.731 44.704 44.594 44.449 45.854 44.813 46.184 46.111 45.454 44.393 43.955 43.171 43.153 42.166 41.29 40.303 39.353 38.129 36.796 35.792 34.313 33.527 33.583 32.249 30.952 30.623 29.254 28.322 28.559 30.788 33.965 37.892 40.102 42.695 43.81 43.973 43.937 43.754 44.723 44.632 44.795 43.937 42.988 42.604 42.112 41.819 41.18 40.066 38.696 37.837 36.485 35.225 34.403 33.545 32.632 31.975 30.733 30.661 29.381 28.633 27.811 27.884 30.514 34.568 38.477 40.906 43.042 44.011 43.262 43.061 44.065 43.864 43.718 43.973 42.731 42.568 42.403 41.509 41.143 40.486 39.536 38.185 36.559 36.686 35.098 34.258 33.052 31.993 31.519 30.661 29.819 29.309 28.414 27.775 28.541 31.501 35.627 39.938 41.764 43.262 42.988 43.663 43.243 43.718 44.029 43.864 43.171 43.115 42.275 41.929 41.417 40.942 40.211 38.806";
QFile mHeadFile;
QFile mIntervalsFile;
QFile mMarksFile;
QFile mRawDataFile;
QFile mTestData;
QFile mRawDataSessionRecordFile;

uint64_t startTimeStampRecord {0};
uint16_t mCurrentLabelIndex;

bool isDownloadGraph = false;
bool isPlayRecord = true;
int currSpeed = speed::SpeedX1;
_mSPIData *mAllRecordedDataBuffer = nullptr;
uint mSizeAllRecordedData = 0, mSizeFirstInterval = 0, mSizeSecondInterval = 0;

uint8_t mCurrentIntervalNum {0};



MainPage::MainPage(QWidget *parent)
  : IPageWidget(parent)
  , mUpdateDateTimeTimer(new QTimer(this))
  , ui(new Ui::MainPage)
{
  ui->setupUi(this);

  setupButtons();
  setupMainMenu();        // Настройка окна главного меню
  setupBottomInfoSVG();   // Настройки нижних иконок-уведомлений
  setupGraphsContainer(); // Настройка контейнера с графиками

  mUpdateDateTimeTimer->setInterval(60000); // Настраиваем обновление виджета с текущим временем

  mVolumeInputPage = new VolumeInputPage(this, 0);
  mVolumeInputPage->hide();
  connect(mVolumeInputPage, &VolumeInputPage::previousPage, this, &MainPage::previousPage);
  connect(mVolumeInputPage, &VolumeInputPage::changePage, this, &MainPage::changePage);

  mParamInputPage = new VolumeInputPage(this, 1);
  mParamInputPage->hide();
  connect(mParamInputPage, &VolumeInputPage::previousPage, this, &MainPage::previousPage);
  connect(mParamInputPage, &VolumeInputPage::changePage, this, &MainPage::changePage);
  connect(mParamInputPage, &VolumeInputPage::intervalParamUpdated, [this]() { mCurrentGraphsArea->mFirstInterval->averagePlot();});

  connect(mUpdateDateTimeTimer, &QTimer::timeout, this, &MainPage::updateDateTime);
  connect(this, &MainPage::playBtnPressed, [this](){mCurrentGraphsArea->mRecordedGraph->animateGraphic(currSpeed);});//&RecordedPlot::animateGraphic);
  connect(mCurrentGraphsArea->mRecordedGraph, &RecordedPlot::changeBtnIcon,[this]()
  {
    //ui->playRecord            ->setIcon(QIcon(":/icons/playRecord.svg"),QIcon(":/icons/playRecord_pressed.svg"));
    ui->intervalButton        ->setEnabled(true);
    ui->goToInterval1Button   ->setEnabled(true);
    ui->goToInterval2Button   ->setEnabled(true);
    ui->goToNextMarkButton    ->setEnabled(true);
    ui->goToPreviousMarkButton->setEnabled(true);
    ui->makeLabelButton       ->setEnabled(true);
    ui->sessionButton         ->setEnabled(true);
//    ui->rewindRecordButton    ->setEnabled(true);
//    ui->speedRecordButton     ->setEnabled(true);
    ui->zoomInterval1Button   ->setEnabled(true);
    ui->zoomInterval2Button   ->setEnabled(true);
    ui->dVInputButton         ->setEnabled(true);
    ui->markPPointButton      ->setEnabled(true);
    ui->downloadGraphButton   ->setEnabled(true);// временно
  } );

#ifdef PC_BUILD
  ui->averageValue->setFont(QFont("Noto Sans", 60, 400));
  ui->mInfoInterval1->setFont(QFont("Noto Sans", 8, 400));
  ui->mInfoInterval2->setFont(QFont("Noto Sans", 8, 400));
#endif
  ui->averageValue->hide();
}

MainPage::~MainPage()
{
  mUpdateDateTimeTimer->stop();
  delete mUpdateDateTimeTimer;
  DESTROY_CLASS(mVolumeInputPage);
  DESTROY_CLASS(mParamInputPage);
  delete ui;
}


#define BUT_SIZE_BIG (100*720/1280)
#define BUT_SIZE_SMALL (100*480/720)
void MainPage::setupButtons()
{
  // Общий стиль для кнопок
  const QString ToolButtonStyleSheet = readStyleSheetFile(":/styles/ToolButtons.qss");

  // Кнопка записи
  ui->recordButton->setIcon(QIcon(":/icons/startRecord.svg"), QIcon(":/icons/startRecord_pressed.svg"));
  ui->recordButton->setIconSize(QSize(BUT_SIZE_BIG, BUT_SIZE_BIG));
  ui->recordButton->setStyleSheet(ToolButtonStyleSheet);
  ui->recordButton->hide();

  // Кнопка установки метки
  ui->makeLabelButton->setIcon(QIcon(":/icons/selectData.svg"), QIcon(":/icons/selectData_pressed.svg"));
  ui->makeLabelButton->setIconSize(QSize(BUT_SIZE_BIG, BUT_SIZE_BIG));
  ui->makeLabelButton->setStyleSheet(ToolButtonStyleSheet);
  ui->makeLabelButton->hide();

  // Кнопка экрана домой
  ui->homeButton->setIcon(QIcon(":/icons/settings.svg"), QIcon(":/icons/settings_pressed.svg"));
  ui->homeButton->setIconSize(QSize(BUT_SIZE_BIG, BUT_SIZE_BIG));
  ui->homeButton->setStyleSheet(ToolButtonStyleSheet);

  // Кнопка начала сессии
  ui->sessionButton->setIcon(QIcon(":/icons/newSession.svg"), QIcon(":/icons/newSession_pressed.svg"));
  ui->sessionButton->setIconSize(QSize(BUT_SIZE_BIG, BUT_SIZE_BIG));
  ui->sessionButton->setStyleSheet(ToolButtonStyleSheet);

  // Кнопка подтверждения метки
  ui->acceptMarkButton->setIcon(QIcon(":/icons/accept.svg"), QIcon(":/icons/accept_pressed.svg"));
  ui->acceptMarkButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->acceptMarkButton->setStyleSheet(ToolButtonStyleSheet);
  ui->acceptMarkButton->hide();

  // Кнопка удаления метки
  ui->rejectMarkButton->setIcon(QIcon(":/icons/reject.svg"), QIcon(":/icons/reject_pressed.svg"));
  ui->rejectMarkButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->rejectMarkButton->setStyleSheet(ToolButtonStyleSheet);
  ui->rejectMarkButton->hide();

  // Кнопки интервалов
  ui->intervalButton->setIcon(QIcon(":/icons/startInterval1.svg"), QIcon(":/icons/startInterval1_pressed.svg"));
  ui->intervalButton->setIconSize(QSize(BUT_SIZE_BIG, BUT_SIZE_BIG));
  ui->intervalButton->setStyleSheet(ToolButtonStyleSheet);
  ui->intervalButton->hide();

  // Кнопка подтверждения интервала
  ui->acceptIntervalButton->setIcon(QIcon(":/icons/accept.svg"), QIcon(":/icons/accept_pressed.svg"));
  ui->acceptIntervalButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->acceptIntervalButton->setStyleSheet(ToolButtonStyleSheet);
  ui->acceptIntervalButton->hide();

  // Кнопка удаления интервала
  ui->rejectIntervalButton->setIcon(QIcon(":/icons/reject.svg"), QIcon(":/icons/reject_pressed.svg"));
  ui->rejectIntervalButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->rejectIntervalButton->setStyleSheet(ToolButtonStyleSheet);
  ui->rejectIntervalButton->hide();

  // Кнопка перехода к 1 интервалу
  ui->goToInterval1Button->setIcon(QIcon(":/icons/firstInterval.svg"),QIcon(":/icons/firstInterval_pressed.svg"));
  ui->goToInterval1Button->setIconSize(QSize(BUT_SIZE_BIG, BUT_SIZE_BIG));
  ui->goToInterval1Button->setStyleSheet(ToolButtonStyleSheet);
  ui->goToInterval1Button->hide();

  // Кнопка перехода ко 2 интервалу
  ui->goToInterval2Button->setIcon(QIcon(":/icons/secondInterval.svg"),QIcon(":/icons/secondInterval_pressed.svg"));
  ui->goToInterval2Button->setIconSize(QSize(BUT_SIZE_BIG, BUT_SIZE_BIG));
  ui->goToInterval2Button->setStyleSheet(ToolButtonStyleSheet);
  ui->goToInterval2Button->hide();

  ui->goToNextMarkButton->setIcon(QIcon(":/icons/nextLabel.svg"),QIcon(":/icons/nextLabel_pressed.svg"));
  ui->goToNextMarkButton->setIconSize(QSize(BUT_SIZE_BIG, BUT_SIZE_BIG));
  ui->goToNextMarkButton->setStyleSheet(ToolButtonStyleSheet);
  ui->goToNextMarkButton->show();

  ui->goToPreviousMarkButton->setIcon(QIcon(":/icons/previousLabel.svg"),QIcon(":/icons/previousLabel_pressed.svg"));
  ui->goToPreviousMarkButton->setIconSize(QSize(BUT_SIZE_BIG, BUT_SIZE_BIG));
  ui->goToPreviousMarkButton->setStyleSheet(ToolButtonStyleSheet);
  ui->goToPreviousMarkButton->show();

  ui->goToPreviousMarkButton->hide();
  ui->goToNextMarkButton->hide();
  ui->labelsNavigation->hide();

  ui->mInfoInterval1->hide();
  ui->mInfoInterval2->hide();

  ui->alarmLevelICPWidget->hide();
  ui->sensorStateLabel->hide();

  ui->playRecord->setIcon(QIcon(":/icons/playRecord.svg"),QIcon(":/icons/playRecord_pressed.svg"));
  ui->playRecord->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->playRecord->setStyleSheet(ToolButtonStyleSheet);
  ui->playRecord->hide();

  ui->rewindRecordButton->setIcon(QIcon(":/icons/rewindRecord.svg"),QIcon(":/icons/rewindRecord_pressed.svg"));
  ui->rewindRecordButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->rewindRecordButton->setStyleSheet(ToolButtonStyleSheet);
  ui->rewindRecordButton->hide();

  ui->speedRecordButton->setIcon(QIcon(":/icons/speedX1.svg"),QIcon(":/icons/speedX1_pressed.svg"));
  ui->speedRecordButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->speedRecordButton->setStyleSheet(ToolButtonStyleSheet);
  ui->speedRecordButton->hide();

  ui->downloadGraphButton->setIcon(QIcon(":/icons/downloadGraph.svg"),QIcon(":/icons/downloadGraph_pressed.svg"));
  ui->downloadGraphButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->downloadGraphButton->setStyleSheet(ToolButtonStyleSheet);
  ui->downloadGraphButton->hide();

  ui->goBackToGraphButton->setIcon(QIcon(":/icons/goBack.svg"),QIcon(":/icons/goBack_pressed.svg"));
  ui->goBackToGraphButton->setIconSize(QSize(BUT_SIZE_BIG, BUT_SIZE_BIG));
  ui->goBackToGraphButton->setStyleSheet(ToolButtonStyleSheet);
  ui->goBackToGraphButton->hide();

  ui->zoomInterval1Button->setIcon(QIcon(":/icons/zoomFirstInterval.svg"),QIcon(":/icons/zoomFirstInterval_pressed.svg"));
  ui->zoomInterval1Button->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->zoomInterval1Button->setStyleSheet(ToolButtonStyleSheet);
  ui->zoomInterval1Button->hide();

  ui->zoomInterval2Button->setIcon(QIcon(":/icons/zoomSecondInterval.svg"),QIcon(":/icons/zoomSecondInterval_pressed.svg"));
  ui->zoomInterval2Button->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->zoomInterval2Button->setStyleSheet(ToolButtonStyleSheet);
  ui->zoomInterval2Button->hide();

  ui->funcFirstButton->setIcon(QIcon(":/icons/func1.svg"),QIcon(":/icons/func1_pressed.svg"));
  ui->funcFirstButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->funcFirstButton->setStyleSheet(ToolButtonStyleSheet);
  ui->funcFirstButton->hide();

  ui->funcSecondButton->setIcon(QIcon(":/icons/func2.svg"),QIcon(":/icons/func2_pressed.svg"));
  ui->funcSecondButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->funcSecondButton->setStyleSheet(ToolButtonStyleSheet);
  ui->funcSecondButton->hide();

  ui->markPPointButton->setIcon(QIcon(":/icons/func3.svg"),QIcon(":/icons/func3_pressed.svg"));
  ui->markPPointButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->markPPointButton->setStyleSheet(ToolButtonStyleSheet);
  ui->markPPointButton->hide();

  ui->dVInputButton->setIcon(QIcon(":/icons/inputVolume.svg"),QIcon(":/icons/inputVolume_pressed.svg"));
  ui->dVInputButton->setIconSize(QSize(BUT_SIZE_SMALL, BUT_SIZE_SMALL));
  ui->dVInputButton->setStyleSheet(ToolButtonStyleSheet);
  ui->dVInputButton->hide();
}
void MainPage::setupBottomInfoSVG()
{
  ui->softwareStorageIconSVG->setMaximumSize(48, 60);
}
void MainPage::setupMainMenu()
{
  if (mMainMenu) { return; }
  mMainMenu = new MainMenu(this);
  mMainMenu->hide();    // Скрываем основное меню

  // Смена виджета
  connect(mMainMenu, &IPageWidget::previousPage, this, &IPageWidget::previousPage);
  connect(mMainMenu, &IPageWidget::changePage, this, &IPageWidget::changePage);
}
void MainPage::setupGraphsContainer()
{
  mCurrentGraphsArea = ui->currentGraphsArea;   // Добавляем графики в контейнер
  mGraphWidgetContainer.push_back(mCurrentGraphsArea);
}
void MainPage::installController(MonitorController *controller)
{
  if (!controller) { return; }

  mController = controller;

  ui->alarmLevelICPWidget->installController(mController);
  mCurrentGraphsArea->installController(mController);
  mMainMenu->installController(mController);

  connect(mController, &MonitorController::controllerEvent, this, &MainPage::controllerEventHandler);

  retranslate();
}
void MainPage::controllerEventHandler(ControllerEvent event)
{
  switch(event)
  {
    case ControllerEvent::GlobalTimeUpdate:
    {
      updateDateTime();
      break;
    }
    case ControllerEvent::LabelCreated:
    {
      //updateLabelCounter();
      break;
    }
    default: break;
  }
}
void MainPage::updateLabelCounter()
{
  // Если контроллер не установлен
  if (!mController) { return; }
  // Подготовка шаблона для заполнения
  const QString counterLabelText = tr("Меток: %1");
  const QString currentLabelText = tr("%1/%2");
  // Запрос у контроллера кол-ва меток за текущую сессию
  int countLabels = mController->getLabelsCountPerCurrentSession();
  if (countLabels > 0)
  {
    //ui->labelCounterLabel->setText(counterLabelText.arg(mLabelManagerGlobal->mCountLabels));
    ui->labelsNavigation->setText(currentLabelText.arg(mCurrentLabelIndex+1).arg(mLabelManagerGlobal->mCountLabels));
  } else {
    //ui->labelCounterLabel->setText(tr("Меток: "));
  }
}
void MainPage::scaleFont(float scaleFactor)
{
  ui->alarmLevelICPWidget ->scaleFont(scaleFactor);
  mCurrentGraphsArea      ->scaleFont(scaleFactor);
  mMainMenu               ->scaleFont(scaleFactor);

  WFontScaling(ui->dateTimeLabel,     scaleFactor);
  WFontScaling(ui->sensorStateLabel,  scaleFactor);
  WFontScaling(ui->labelsNavigation,  scaleFactor);
  WFontScaling(ui->mInfoInterval1,    scaleFactor);
  WFontScaling(ui->mInfoInterval2,    scaleFactor);
  WFontScaling(ui->averageValue,      scaleFactor);
//  WFontScaling(ui->speedRecordButton, scaleFactor);
//  WFontScaling(ui->rewindRecordButton,scaleFactor);
  //WFontScaling(ui->playRecord,        scaleFactor);
  WFontScaling(ui->dVInputButton,     scaleFactor);
  WFontScaling(ui->markPPointButton,     scaleFactor);

}
void MainPage::updateDateTime()
{
  auto currentDateTime = QDateTime::currentDateTime().toString("hh:mm\ndd.MM.yyyy");
  if (currentDateTime != mLastDateTime)
  {
    ui->dateTimeLabel->setText(currentDateTime);
    mLastDateTime = currentDateTime;
  }
}
void MainPage::nextGraph()
{
  int countGraph = mGraphWidgetContainer.size();  // Кол-во графиков
  if (countGraph < 2) { return; }                 // Если в списке меньше одного графика
  mGraphWidgetContainer[mGraphNumber]->hide();    // Скрываем текущий график

  mGraphNumber++;
  mGraphNumber %= countGraph;
  mGraphWidgetContainer[mGraphNumber]->show();    // Показываем следующий график
}
void MainPage::showEvent(QShowEvent */*event*/)
{
  updateDateTime();
  mUpdateDateTimeTimer->start();
}
void MainPage::hideEvent(QHideEvent */*event*/)
{
  mUpdateDateTimeTimer->stop();
}
void MainPage::retranslate()
{
  mCurrentGraphsArea->retranslate();
  updateLabelCounter();
  mMainMenu->retranslate();
  //ui->averageICPWidget->retranslate();
  //updateSessionInfo(); !!!!
  //updateSensorState();
  //updateSensorInfo();
}
void MainPage::on_homeButton_clicked()
{
  emit changePage(mMainMenu);
}
void MainPage::on_recordButton_clicked()
{
  QString currentTime = QDateTime::currentDateTime().toString("yyyy_MM_dd@hh_mm_ss");
  if (isStart)
  {
    mCurrentGraphsArea->resetGraphOfCurrentValues();

    isStart = false;
    mCurrentRecordDir.setPath(mntDirectory+ "/" + currentTime);
    ui->recordButton->setIcon(QIcon(":/icons/stopRecord.svg"), QIcon(":/icons/stopRecord_pressed.svg"));

    mHeadFile.setFileName(mCurrentRecordDir.path()      + "/" + "HEAD.txt");
    mIntervalsFile.setFileName(mCurrentRecordDir.path() + "/" + "INTERVALS.txt");
    mMarksFile.setFileName(mCurrentRecordDir.path()     + "/" + "MARKS.txt");
    mRawDataFile.setFileName(mCurrentRecordDir.path()   + "/" + "RAW_DATA.txt");
    mRawDataSessionRecordFile.setFileName(mCurrentRecordDir.path()   + "/" + "SESSION_RECORD_DATA.txt");

    qDebug() << mCurrentRecordDir.path();
    if (!mCurrentRecordDir.exists())
    {
#ifdef TEST_BUILD
      QString response;
      response = executeAConsoleCommand("mkdir", QStringList() << "-p" << mCurrentRecordDir.path());
      if (response == "")
      {
        qDebug() << "Dir open = "<< mCurrentRecordDir.path();
      }
      else
      {
        qDebug() << "error" << response;
      }
#endif
#ifdef PC_BUILD
      mCurrentRecordDir.mkdir(mCurrentRecordDir.path());
#endif
    }
    if (mHeadFile.open(QIODevice::WriteOnly | QIODevice::Append))
    {
      QStringList time = currentTime.split("@");
      mHeadFile.write(("Session started: " + time[0].replace("_", ".") + " " + time[1].replace("_", ":") +
          "\nStartTimeStamp(ms): " + QString::number(getCurrentTimeStampMS()) + "\n").toLatin1());
      mHeadFile.close();
    }

    ui->mainWidgets   ->show();
    ui->sessionButton ->setEnabled(false);
    mRawDataFile.open(QIODevice::WriteOnly | QIODevice::Append);

    mCurrentGraphsArea->isRecord = true;
    mCurrentGraphsArea->mReadSPI->isRecording = true;
    mCurrentGraphsArea->resetGraphOfCurrentValues();

  }
  else
  {
    uint64_t StopMS = getCurrentTimeStampMS();
    ui->recordButton->setIcon(QIcon(":/icons/startRecord.svg"), QIcon(":/icons/startRecord_pressed.svg"));
    currentTime = QDateTime::currentDateTime().toString("yyyy.MM.dd hh:mm:ss");
    if (mHeadFile.open(QIODevice::WriteOnly | QIODevice::Append))
    {
      QStringList time = currentTime.split("@");
      mHeadFile.write(("Session stopped: " + currentTime + "\nStopTimeStamp(ms): " + QString::number(StopMS) + "\n").toLatin1());
      mHeadFile.close();
    }
    isStart = true;

#define SET_VISIBLED_DISABLED(_UUII) {ui->_UUII->show();  ui->_UUII->setEnabled(false);}
#define SET_VISIBLED_ENABLED(_UUII) {ui->_UUII->show();  ui->_UUII->setEnabled(true);}

    ui->intervalButton      ->show();
    //ui->playRecord          ->show();
//    ui->rewindRecordButton  ->show();
//    ui->speedRecordButton   ->show();
    ui->downloadGraphButton ->show();
    ui->dVInputButton       ->show();
    ui->markPPointButton    ->show();

    ui->goToInterval1Button ->hide();
    ui->mInfoInterval1      ->hide();
    ui->goToInterval2Button ->hide();
    ui->mInfoInterval2      ->hide();
    ui->recordButton        ->hide();
    ui->alarmLevelICPWidget ->hide();
    ui->averageValue        ->hide();

    ui->sessionButton       ->setEnabled(true);

    SET_VISIBLED_DISABLED(goToPreviousMarkButton);
    SET_VISIBLED_DISABLED(labelsNavigation);
    ui->labelsNavigation->setText("0/0");
    SET_VISIBLED_DISABLED(goToNextMarkButton);
    SET_VISIBLED_ENABLED(makeLabelButton);

    mRawDataFile.close();
    mCurrentGraphsArea->stopWork();
    mCurrentGraphsArea->changeGraph(1);

    mSizeAllRecordedData = mRawDataFile.size()/6;
    mAllRecordedDataBuffer = new _mSPIData[mSizeAllRecordedData];
    mRawDataFile.open(QIODevice::ReadOnly);
    mRawDataFile.read((char*)mAllRecordedDataBuffer, mRawDataFile.size());
    mRawDataFile.close();
    mCurrentGraphsArea->addDataOnRecordedPlot();
  }
}
void MainPage::on_makeLabelButton_clicked()
{
  ui->acceptMarkButton        ->show();
  ui->rejectMarkButton        ->show();
  ui->makeLabelButton         ->setEnabled(false);
  ui->sessionButton           ->setEnabled(false);
  ui->goToPreviousMarkButton  ->setEnabled(false);
  ui->goToNextMarkButton      ->setEnabled(false);
  ui->goToInterval1Button     ->setEnabled(false);
  ui->goToInterval2Button     ->setEnabled(false);
  ui->intervalButton          ->setEnabled(false);
  //ui->playRecord              ->setEnabled(false);
//  ui->rewindRecordButton      ->setEnabled(false);
//  ui->speedRecordButton       ->setEnabled(false);
  ui->downloadGraphButton     ->setEnabled(false);
  ui->zoomInterval1Button     ->setEnabled(false);
  ui->zoomInterval2Button     ->setEnabled(false);
  ui->dVInputButton           ->setEnabled(false);
  ui->markPPointButton        ->setEnabled(false);

  QTimer::singleShot(0, mController, [this](){ mController->makeLabel(); });
  //emit (changeLabelButtonStatus);
}
void MainPage::on_acceptMarkButton_clicked()
{
  ui->labelsNavigation    ->show();
  ui->acceptMarkButton    ->hide();
  ui->rejectMarkButton    ->hide();
  ui->makeLabelButton     ->setEnabled(true);
  ui->intervalButton      ->setEnabled(true);
  ui->sessionButton       ->setEnabled(true);
  ui->goToInterval1Button ->setEnabled(true);
  ui->goToInterval2Button ->setEnabled(true);
  //ui->playRecord          ->setEnabled(true);
//  ui->rewindRecordButton  ->setEnabled(true);
//  ui->speedRecordButton   ->setEnabled(true);
  ui->downloadGraphButton ->setEnabled(true);
  ui->zoomInterval1Button ->setEnabled(true);
  ui->zoomInterval2Button ->setEnabled(true);
  ui->dVInputButton       ->setEnabled(true);
  ui->markPPointButton    ->setEnabled(true);

  mMarksFile.open(QIODevice::WriteOnly | QIODevice::Append);
  mMarksFile.write((QString::number(mLabelManagerGlobal->mCountLabels) + ": " + QString::number(mCoordLabelX) + "\n").toLatin1());
  mMarksFile.close();
  mLabelItemsContainer.back()->getLabel()->mCurrentPos = (float)mCoordLabelX/1000;

  if (mIntervalsCount < 4) { ui->intervalButton->show(); }
  mCurrentGraphsArea->addOrDeleteNewItem(true);
  updateLabelCounter();
  if (ui->labelsNavigation->text() != "0/0")
  {
    ui->goToPreviousMarkButton ->setEnabled(true);
    ui->goToNextMarkButton     ->setEnabled(true);
  }
}
void MainPage::on_rejectMarkButton_clicked()
{
  ui->acceptMarkButton    ->hide();
  ui->rejectMarkButton    ->hide();
  ui->makeLabelButton     ->setEnabled(true);
  ui->intervalButton      ->setEnabled(true);
  ui->sessionButton       ->setEnabled(true);
  ui->goToInterval1Button ->setEnabled(true);
  ui->goToInterval2Button ->setEnabled(true);
  //ui->playRecord          ->setEnabled(true);
//  ui->rewindRecordButton  ->setEnabled(true);
//  ui->speedRecordButton   ->setEnabled(true);
  ui->downloadGraphButton ->setEnabled(true);
  ui->zoomInterval1Button ->setEnabled(true);
  ui->zoomInterval2Button ->setEnabled(true);
  ui->dVInputButton       ->setEnabled(true);
  ui->markPPointButton    ->setEnabled(true);

  if (mIntervalsCount < 4) { ui->intervalButton->show(); }
  mCurrentGraphsArea->addOrDeleteNewItem(false);
  if (ui->labelsNavigation->text() != "0/0")
  {
    ui->goToPreviousMarkButton ->setEnabled(true);
    ui->goToNextMarkButton     ->setEnabled(true);
  }
}
void MainPage::startSession()
{
  ui->sessionButton->setIcon(QIcon(":/icons/deleteSession.svg"), QIcon(":/icons/deleteSession_pressed.svg"));
  connect(this, &MainPage::setAveragePointerPos, ui->alarmLevelICPWidget, &AlarmLevelICPWidget::updateAverageValueOnWidgets);
  ui->recordButton        ->show();
  ui->alarmLevelICPWidget ->show();
  ui->averageValue        ->show();
  ui->homeButton          ->hide();
  ui->makeLabelButton     ->hide();
  ui->acceptMarkButton    ->hide();
  ui->rejectMarkButton    ->hide();
  ui->recordButton        ->setEnabled(true);

  //ui->averageICPWidget->show();
  mCurrentLabelIndex = 0;
  mCurrentGraphsArea->startPlotting();
  mCurrentGraphsArea->startWork();
}
void MainPage::stopSession()
{
  ui->sessionButton->setIcon(QIcon(":/icons/newSession.svg"), QIcon(":/icons/newSession_pressed.svg"));
  mCurrentGraphsArea->stopPlotting();
  isDownloadGraph = false;

  mCurrentGraphsArea->changeGraph(0);
  mCurrentGraphsArea->resetGraphOfCurrentValues();

  ui->homeButton            ->show();
  ui->makeLabelButton       ->hide();
  ui->acceptMarkButton      ->hide();
  ui->rejectMarkButton      ->hide();
  ui->recordButton          ->hide();
  ui->intervalButton        ->hide();
  ui->acceptIntervalButton  ->hide();
  ui->rejectIntervalButton  ->hide();
  ui->goToInterval1Button   ->hide();
  ui->goToInterval2Button   ->hide();
  ui->labelsNavigation      ->hide();
  ui->goToPreviousMarkButton->hide();
  ui->goToNextMarkButton    ->hide();
  ui->mInfoInterval1        ->hide();
  ui->mInfoInterval2        ->hide();
  ui->averageValue          ->hide();
  ui->alarmLevelICPWidget   ->hide(); //или оставить?
  //ui->playRecord            ->hide();
//  ui->rewindRecordButton    ->hide();
//  ui->speedRecordButton     ->hide();
  ui->downloadGraphButton   ->hide();
  ui->zoomInterval1Button   ->hide();
  ui->zoomInterval2Button   ->hide();
  ui->dVInputButton         ->hide();
  ui->markPPointButton      ->hide();

  mCurrentGraphsArea->stopWork();
  mCurrentGraphsArea->stopWorkDraw();

  mCurrentGraphsArea->removeAllGraphs();
  ui->intervalButton->setIcon(QIcon(":/icons/startInterval1.svg"), QIcon(":/icons/startInterval1_pressed.svg"));
}
void MainPage::on_sessionButton_clicked()
{
  if (isSessionStart)
  {
    isSessionStart = false;
    startSession();
  }
  else
  {
    isSessionStart = true;
    stopSession();
  }
}
void MainPage::on_intervalButton_clicked()
{
  ui->acceptIntervalButton    ->show();
  ui->rejectIntervalButton    ->show();
  ui->makeLabelButton         ->setEnabled(false); //ui->makeLabelButton->hide();
  ui->sessionButton           ->setEnabled(false);
  ui->goToPreviousMarkButton  ->setEnabled(false);
  ui->goToNextMarkButton      ->setEnabled(false);
  ui->goToInterval1Button     ->setEnabled(false);
  ui->goToInterval2Button     ->setEnabled(false);
  //ui->playRecord              ->setEnabled(false);
//  ui->rewindRecordButton      ->setEnabled(false);
//  ui->speedRecordButton       ->setEnabled(false);
  ui->downloadGraphButton     ->setEnabled(false);
  ui->zoomInterval1Button     ->setEnabled(false);
  ui->zoomInterval2Button     ->setEnabled(false);
  ui->dVInputButton           ->setEnabled(false);
  ui->markPPointButton        ->setEnabled(false);

  mCurrentGraphsArea->addIntervalOnRecordedGraph();
  if (isIntervalCreating)
  {
    ui->intervalButton->setEnabled(false);
  }
}
void MainPage::on_acceptIntervalButton_clicked()
{
  if (isStartInterval)
  {
    if (mIntervalsCount == 1)
    {
      ui->intervalButton->setIcon(QIcon(":/icons/stopInterval1.svg"), QIcon(":/icons/stopInterval1_pressed.svg"));
    }
    else
    {
      ui->intervalButton->setIcon(QIcon(":/icons/stopInterval2.svg"), QIcon(":/icons/stopInterval2_pressed.svg"));
    }
    isStartInterval = false;
  }
  else
  {
    ui->intervalButton->setIcon(QIcon(":/icons/startInterval2.svg"), QIcon(":/icons/startInterval2_pressed.svg"));
    isStartInterval = true;
  }
  mIntervalsFile.open(QIODevice::WriteOnly | QIODevice::Append);
  mIntervalsFile.write((QString::number(mIntervalsCount) + ": " + QString::number(mIntervalsContainer[mIntervalsCount-1]->mIntervalPos) + "\n").toLatin1());
  mIntervalsFile.close();

  ui->acceptIntervalButton  ->hide();
  ui->rejectIntervalButton  ->hide();
  ui->makeLabelButton       ->setEnabled(true);
  ui->sessionButton         ->setEnabled(true);
  ui->goToInterval1Button   ->setEnabled(true);
  ui->goToInterval2Button   ->setEnabled(true);
  ui->intervalButton        ->setEnabled(true);
//  ui->playRecord            ->setEnabled(true);
//  ui->rewindRecordButton    ->setEnabled(true);
//  ui->speedRecordButton     ->setEnabled(true);
  ui->downloadGraphButton   ->setEnabled(true);
  ui->zoomInterval1Button   ->setEnabled(true);
  ui->zoomInterval2Button   ->setEnabled(true);
  ui->dVInputButton         ->setEnabled(true);
  ui->markPPointButton      ->setEnabled(true);

  mCurrentGraphsArea->addOrDeleteNewItem(true);

  const QString intervalDataPreset = tr("Максимум\n%1\nСреднее\n%2"); //перевести потом

  if (mIntervalsCount % 2 == 0)
  {
    mCurrentGraphsArea->colorInterval();
    if (mIntervalsCount == 2)
    {
      ui->mInfoInterval1      ->setText(intervalDataPreset.arg(mIntervalsContainer[mIntervalsCount-1]->maxIntervalValue, 0, 'f', 1).arg(mIntervalsContainer[mIntervalsCount-1]->averageIntervalValue, 0, 'f', 1));
      ui->goToInterval1Button ->show();
      ui->mInfoInterval1      ->show();
      ui->zoomInterval1Button ->show();
    }
    else
    {
      ui->mInfoInterval2      ->setText(intervalDataPreset.arg(QString::number(mIntervalsContainer[mIntervalsCount-1]->maxIntervalValue, 'f', 1)).arg(QString::number(mIntervalsContainer[mIntervalsCount-1]->averageIntervalValue, 'f', 1)));
      ui->goToInterval2Button ->show();
      ui->mInfoInterval2      ->show();
      ui->intervalButton      ->hide();
      ui->zoomInterval2Button ->show();
    }
  }
  if (ui->labelsNavigation->text() != "0/0")
  {
    ui->goToPreviousMarkButton  ->setEnabled(true);
    ui->goToNextMarkButton      ->setEnabled(true);
  }
}
void MainPage::on_rejectIntervalButton_clicked()
{
  ui->acceptIntervalButton  ->hide();
  ui->rejectIntervalButton  ->hide();
  ui->makeLabelButton       ->setEnabled(true);
  ui->sessionButton         ->setEnabled(true);
  ui->goToInterval1Button   ->setEnabled(true);
  ui->goToInterval2Button   ->setEnabled(true);
  ui->intervalButton        ->setEnabled(true);
//  ui->playRecord            ->setEnabled(true);
//  ui->rewindRecordButton    ->setEnabled(true);
//  ui->speedRecordButton     ->setEnabled(true);
  ui->downloadGraphButton   ->setEnabled(true);
  ui->zoomInterval1Button   ->setEnabled(true);
  ui->zoomInterval2Button   ->setEnabled(true);
  ui->dVInputButton         ->setEnabled(true);
  ui->markPPointButton      ->setEnabled(true);

  if (ui->labelsNavigation->text() != "0/0")
  {
    ui->goToPreviousMarkButton  ->setEnabled(true);
    ui->goToNextMarkButton      ->setEnabled(true);
  }
  mIntervalsCount--;
  mCurrentGraphsArea->addOrDeleteNewItem(false);
}
void MainPage::on_goToInterval1Button_clicked()
{
  mCurrentGraphsArea->changeXInterval(first);
}
void MainPage::on_goToInterval2Button_clicked()
{
  mCurrentGraphsArea->changeXInterval(second);
}
void MainPage::on_goToPreviousMarkButton_clicked()
{    
  mCurrentGraphsArea->goToLabel(previous);
  updateLabelCounter();
}
void MainPage::on_goToNextMarkButton_clicked()
{    
  mCurrentGraphsArea->goToLabel(next);
  updateLabelCounter();
}
void MainPage::on_playRecord_clicked()
{
  if (isPlayRecord)
  {
    isPlayRecord = false;
    //ui->playRecord            ->setIcon(QIcon(":/icons/pauseRecord.svg"),QIcon(":/icons/pauseRecord_pressed.svg"));
    ui->intervalButton        ->setEnabled(false);
    ui->goToInterval1Button   ->setEnabled(false);
    ui->goToInterval2Button   ->setEnabled(false);
    ui->goToNextMarkButton    ->setEnabled(false);
    ui->goToPreviousMarkButton->setEnabled(false);
    ui->makeLabelButton       ->setEnabled(false);
    ui->sessionButton         ->setEnabled(false);
//    ui->rewindRecordButton    ->setEnabled(false);
//    ui->speedRecordButton     ->setEnabled(false);
    ui->downloadGraphButton   ->setEnabled(false);
    ui->zoomInterval1Button   ->setEnabled(false);
    ui->zoomInterval2Button   ->setEnabled(false);
    ui->dVInputButton         ->setEnabled(false);
    ui->markPPointButton      ->setEnabled(false);
  }
  else
  {
    isPlayRecord = true;
    //ui->playRecord            ->setIcon(QIcon(":/icons/playRecord.svg"),QIcon(":/icons/playRecord_pressed.svg"));
    ui->intervalButton        ->setEnabled(true);
    ui->goToInterval1Button   ->setEnabled(true);
    ui->goToInterval2Button   ->setEnabled(true);
    ui->goToNextMarkButton    ->setEnabled(true);
    ui->goToPreviousMarkButton->setEnabled(true);
    ui->makeLabelButton       ->setEnabled(true);
    ui->sessionButton         ->setEnabled(true);
//    ui->rewindRecordButton    ->setEnabled(true);
//    ui->speedRecordButton     ->setEnabled(true);
    ui->dVInputButton         ->setEnabled(true);
    ui->markPPointButton      ->setEnabled(true);
    ui->downloadGraphButton   ->setEnabled(true);
  }
  emit(playBtnPressed());
}
void MainPage::on_rewindRecordButton_clicked()
{
  mCurrentGraphsArea->mRecordedGraph->xAxis->setRange(0, mCurrentGraphsArea->mRecordedGraph->xAxis->range().size());
}
void MainPage::on_downloadGraphButton_clicked()
{
  isDownloadGraph = true;
  //mCurrentGraphsArea->mRecordedGraph->clearItems();
  //mCurrentGraphsArea->mRecordedGraph->clearGraphs();
  //    _mSPIData temp;
  //    QStringList t = tempArrTime.split(" ");
  //    QStringList p = tempArrPressure.split(" ");

  mTestData.setFileName("/media/testData.txt");

  //    mTestData.open(QIODevice::WriteOnly);
  //    for (int i=0; i < t.size(); i++)
  //    {
  //        temp.data = (uint16_t)p[i].toFloat();
  //        temp.timeStamp = t[i].toUInt();
  //        qDebug() <<t.count()<< temp.data << temp.timeStamp;
  //        mTestData.write((char*)&temp, sizeof(temp));
  //    }
  //    mTestData.close();
  mCurrentGraphsArea->mRecordedGraph->addDataOnGraphic();
  //mCurrentGraphsArea->mRecordedGraph->downloadData(&temp);//доделать
}


void MainPage::on_speedRecordButton_clicked()
{
  iconCount++;
  switch (iconCount % 3)
  {
    case 0: //normal
    {
      currSpeed = speed::SpeedX1;
      ui->speedRecordButton->setIcon(QIcon(":/icons/speedX1.svg"),QIcon(":/icons/speedX1_pressed.svg"));
      break;
    }
    case 1: //x2
    {
      currSpeed = speed::SpeedX2;
      ui->speedRecordButton->setIcon(QIcon(":/icons/speedX2.svg"),QIcon(":/icons/speedX2_pressed.svg"));
      break;
    }
    case 2: //x4
    {
      currSpeed = speed::SpeedX2;
      ui->speedRecordButton->setIcon(QIcon(":/icons/speedX4.svg"),QIcon(":/icons/speedX4_pressed.svg"));
      break;
    }
    default : break;
  }
}

void MainPage::setAverage(uint16_t currAverage)
{
  ui->averageValue->setText(QString::number(currAverage));
  setAveragePointerPos(currAverage);
}
void MainPage::on_zoomInterval1Button_clicked()
{
  mCurrentIntervalNum = 1;
  mCurrentGraphsArea->setMarksOnInterval();
  mCurrentGraphsArea->changeGraph(2); // 1 интервал

  ui->funcFirstButton       ->show();
  ui->funcSecondButton      ->show();
  //ui->funcThirdButton       ->show();
  ui->goBackToGraphButton   ->show();
  ui->intervalButton        ->hide();
  ui->goToInterval1Button   ->hide();
  ui->goToNextMarkButton    ->hide();
  ui->goToPreviousMarkButton->hide();
  ui->makeLabelButton       ->hide();
  ui->sessionButton         ->hide();
//  ui->rewindRecordButton    ->hide();
//  ui->speedRecordButton     ->hide();
  ui->zoomInterval1Button   ->hide();
  //ui->playRecord            ->hide();
  ui->labelsNavigation      ->hide();
  ui->downloadGraphButton   ->hide();
  ui->dVInputButton         ->hide();
  ui->markPPointButton      ->hide();
  if (mIntervalsCount == 4)
  {
    ui->goToInterval2Button->hide();
    ui->zoomInterval2Button->hide();
    ui->mInfoInterval2->hide();
  }
}
void MainPage::on_zoomInterval2Button_clicked()
{    
  mCurrentIntervalNum = 2;
  mCurrentGraphsArea->setMarksOnInterval();
  mCurrentGraphsArea->changeGraph(3); // 2 интервал

  ui->funcFirstButton       ->show();
  ui->funcSecondButton      ->show();
  //ui->funcThirdButton       ->show();
  ui->mInfoInterval2        ->show();
  ui->goBackToGraphButton   ->show();
  ui->mInfoInterval1        ->hide();
  ui->intervalButton        ->hide();
  ui->goToInterval1Button   ->hide();
  ui->goToNextMarkButton    ->hide();
  ui->goToPreviousMarkButton->hide();
  ui->makeLabelButton       ->hide();
  ui->sessionButton         ->hide();
//  ui->rewindRecordButton    ->hide();
//  ui->speedRecordButton     ->hide();
  ui->zoomInterval1Button   ->hide();
//  ui->playRecord            ->hide();
  ui->labelsNavigation      ->hide();
  ui->goToInterval2Button   ->hide();
  ui->zoomInterval2Button   ->hide();
  ui->downloadGraphButton   ->hide();
  ui->dVInputButton         ->hide();
  ui->markPPointButton      ->hide();
}
void MainPage::on_goBackToGraphButton_clicked()
{
  mCurrentIntervalNum = 0;
  mCurrentGraphsArea        ->changeGraph(1);
  ui->goBackToGraphButton   ->hide();
  ui->funcFirstButton       ->hide();
  ui->funcSecondButton      ->hide();
  //ui->funcThirdButton       ->hide();
  ui->goToInterval1Button   ->show();
  ui->goToNextMarkButton    ->show();
  ui->goToPreviousMarkButton->show();
  ui->makeLabelButton       ->show();
  ui->sessionButton         ->show();
//  ui->rewindRecordButton    ->show();
//  ui->speedRecordButton     ->show();
  ui->zoomInterval1Button   ->show();
//  ui->playRecord            ->show();
  ui->labelsNavigation      ->show();
  ui->mInfoInterval1        ->show();
  ui->downloadGraphButton   ->show();
  ui->dVInputButton         ->show();
  ui->markPPointButton      ->show();
  if (mIntervalsCount == 4)
  {
    ui->goToInterval2Button ->show();
    ui->zoomInterval2Button ->show();
    ui->mInfoInterval2      ->show();
  }
  else
  {
    ui->intervalButton->show();
  }
}



void MainPage::on_dVInputButton_clicked()
{
    emit changePage(mVolumeInputPage);
}

void MainPage::on_funcFirstButton_clicked()
{
    emit changePage(mParamInputPage);
    //mCurrentGraphsArea->mFirstInterval->averagePlot();
    //mCurrentGraphsArea->replotIntervalGraph();
}


void MainPage::on_markPPointButton_clicked()
{
    mCurrentGraphsArea->changeGraph(4);
    QList <QAbstractButton*> btnList = this->findChildren<QAbstractButton*>();
    int N = btnList.count();
    for (int i=0; i<N; i++)
    {
        btnList[i]->hide();
    }
    ui->sessionButton->show();
    ui->labelsNavigation->hide();
    ui->mInfoInterval1->hide();
    ui->mInfoInterval2->hide();
    mCurrentGraphsArea->calcCompliance();

}

